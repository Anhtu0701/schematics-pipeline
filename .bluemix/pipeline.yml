---
defaultBaseImageVersion: latest
properties:
- name: API_KEY
  value: ${API_KEY}
  type: secure
- name: WORKSPACE_ID
  value: ${WORKSPACE_ID}
  type: text
stages:
- name: UPDATE
  inputs:
  - type: git
    branch: master
    service: ${TERRAFORM_REPO}
  triggers:
  - type: commit
  jobs:
  - name: "Update Workspace"
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
      echo "Workspace $WORKSPACE_ID"

      # force login (required by schematics cli)
      export API=$(echo $IDS_URL | cut -d'/' -f3)
      export REGION=$(echo $TOOLCHAIN_CRN | cut -d':' -f6)
      ibmcloud login --apikey $API_KEY -a "https://$API" -r $REGION

      # get schematics workspace as json
      WORKSPACE=$(ibmcloud terraform workspace get -i $WORKSPACE_ID --json)

      # get rid of trailing "OK"
      WORKSPACE=${WORKSPACE%??}

      echo "Updating Schematics workspace from environment variables..."

      # iterate over ALL schematics worskpace variables to see if there is a matching env var
      for KEY in $(echo $WORKSPACE | jq ".template_data[0].values_metadata[].name" -r); do
          
          # if the value exists as an env var, update the workspace
          if [ -n "${!KEY}" ]; then
              echo "$KEY found with value '${!KEY}'"; 
              SEARCH=$(echo $WORKSPACE | jq ".template_data[0].variablestore[].name")
              
              if [[ "$SEARCH" =~ .*"$KEY".* ]]; then
                  #echo "It's there, update it."
                  WORKSPACE=$(echo $WORKSPACE | jq -r \
                      --arg updateKey "$KEY" \
                      --arg updateVal "${!KEY}" \
                      '.template_data[0].variablestore = [.template_data[0].variablestore[] | if (.name == $updateKey) then (.value = $updateVal) else . end]' )

              else 
                  #echo "It's NOT there, add it."
                  WORKSPACE=$(echo $WORKSPACE | jq -r ".template_data[0].variablestore[.template_data[0].variablestore| length] |= . + { \"name\": \"$KEY\", \"value\": \"${!KEY}\", \"type\": \"string\" }")
                  
              fi
          fi
      done

      echo $WORKSPACE > workspace.json
      ibmcloud terraform workspace update --id $WORKSPACE_ID --file workspace.json

      # cleanup
      rm -f workspace.json
      unset WORKSPACE
- name: PLAN
  inputs:
  - type: job
    stage: UPDATE
    job: "Update Workspace"
  triggers:
  - type: stage
  jobs:
  - name: "Terraform Plan"
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash

      # force login (required by schematics cli)
      export API=$(echo $IDS_URL | cut -d'/' -f3)
      export REGION=$(echo $TOOLCHAIN_CRN | cut -d':' -f6)
      ibmcloud login --apikey $API_KEY -a "https://$API" -r $REGION

      echo "ibmcloud terraform plan --id $WORKSPACE_ID"
      
      # run terraform plan
      ACTIVITY=$(ibmcloud terraform plan -id $WORKSPACE_ID --json)

      # get rid of trailing "OK"
      ACTIVITY=${ACTIVITY%??}

      ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
      echo "Activity ID   $ACTIVITY_ID"

      # poll until status is no longer INPROGRESS, or if there is an error
      while :
      do
        STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
        
        RET_VAL=$?
        if [ $RET_VAL -ne 0 ]; then

          echo $STATUS
          exit $RET_VAL
        else

          # get rid of trailing "OK"
          STATUS=${STATUS%??}
          STATUS_VALUE=$(echo $STATUS | jq -r ".status")
          echo "Polling for status: $STATUS_VALUE"

          if [ "$STATUS_VALUE" = "FAILED" ]; then
            exit 1
          elif [ "$STATUS_VALUE" != "INPROGRESS" ]; then  
            break
          fi
        fi

        # sleep for 5 seconds, while waiting for completion
        sleep 5
      done
- name: APPLY
  inputs:
  - type: job
    stage: PLAN
    job: "Terraform Plan"
  triggers:
  - type: stage
  jobs:
  - name: "Terraform Apply"
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash

      # force login (required by schematics cli)
      export API=$(echo $IDS_URL | cut -d'/' -f3)
      export REGION=$(echo $TOOLCHAIN_CRN | cut -d':' -f6)
      ibmcloud login --apikey $API_KEY -a "https://$API" -r $REGION

      echo "ibmcloud terraform apply --id $WORKSPACE_ID --force"
      
      # run terraform apply
      ACTIVITY=$(ibmcloud terraform apply -id $WORKSPACE_ID --json --force)

      # get rid of trailing "OK"
      ACTIVITY=${ACTIVITY%??}

      ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
      echo "Activity ID   $ACTIVITY_ID"

      # poll until status is no longer INPROGRESS, or if there is an error
      while :
      do
        STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
        
        RET_VAL=$?
        if [ $RET_VAL -ne 0 ]; then

          echo $STATUS
          exit $RET_VAL
        else

          # get rid of trailing "OK"
          STATUS=${STATUS%??}
          STATUS_VALUE=$(echo $STATUS | jq -r ".status")
          echo "Polling for status: $STATUS_VALUE"

          if [ "$STATUS_VALUE" = "FAILED" ]; then
            exit 1
          elif [ "$STATUS_VALUE" != "INPROGRESS" ]; then  
            break
          fi
        fi

        # sleep for 5 seconds, while waiting for completion
        sleep 5
      done




